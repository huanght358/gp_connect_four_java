package org.sam.game.EvolvedPlayers;

import org.sam.game.GPPlayer;
import org.sam.game.Game;

/**
 * Created by samuel on 14/08/14.
 */
public class RampedHHOnlyTernaryPlayer extends GPPlayer {
    @Override
    protected long evalGame(char playerColour, char enemyColour, Game game) {
        return (1 >= 0 ? ((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : (enemyColour == game.getColourOfStone(6, 4) ? 1 : 0)) : (((playerColour == game.getColourOfStone(5, 4) ? 1 : 0) >= 0 ? ((playerColour == game.getColourOfStone(5, 4) ? 1 : 0) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : ((((playerColour == game.getColourOfStone(5, 4) ? 1 : 0) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : ((((enemyColour == game.getColourOfStone(6, 5) ? 1 : 0) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : -4) >= 0 ? (enemyColour == game.getColourOfStone(6, 4) ? 1 : 0) : -4) >= 0 ? 1 : (playerColour == game.getColourOfStone(5, 4) ? 1 : 0))) >= 0 ? ((playerColour == game.getColourOfStone(5, 4) ? 1 : 0) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : -4) : -4) >= 0 ? 1 : (playerColour == game.getColourOfStone(5, 4) ? 1 : 0))) : -4) >= 0 ? (-4 >= 0 ? -3 : ((( playerCanWinInTwoRounds( playerColour, enemyColour, game)  >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : -4) >= 0 ? 1 : (enemyColour == game.getColourOfStone(6, 4) ? 1 : 0)) >= 0 ? (((enemyColour == game.getColourOfStone(6, 5) ? 1 : 0) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : (enemyColour == game.getColourOfStone(1, 3) ? 1 : 0)) >= 0 ? ((1 >= 0 ? (playerColour == game.getColourOfStone(5, 4) ? 1 : 0) : (playerColour == game.getColourOfStone(5, 4) ? 1 : 0)) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : (playerColour == game.getColourOfStone(5, 4) ? 1 : 0)) : -4) : ((-4 >= 0 ? (enemyColour == game.getColourOfStone(6, 4) ? 1 : 0) : -4) >= 0 ? (enemyColour == game.getColourOfStone(6, 4) ? 1 : 0) : (playerColour == game.getColourOfStone(5, 4) ? 1 : 0)))) : ((1 >= 0 ? (-4 >= 0 ? -3 : ((playerColour == game.getColourOfStone(5, 4) ? 1 : 0) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : (-4 >= 0 ? ((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : (enemyColour == game.getColourOfStone(6, 4) ? 1 : 0)) : (((playerColour == game.getColourOfStone(5, 4) ? 1 : 0) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : -4) >= 0 ? ((((playerColour == game.getColourOfStone(5, 4) ? 1 : 0) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : -4) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : (-4 >= 0 ? -3 : ((1 >= 0 ? (((playerColour == game.getColourOfStone(5, 4) ? 1 : 0) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  :  playerCanWinInTwoRounds( playerColour, enemyColour, game) ) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : (enemyColour == game.getColourOfStone(6, 4) ? 1 : 0)) : (((playerColour == game.getColourOfStone(5, 4) ? 1 : 0) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : -4) >= 0 ? (-4 >= 0 ? -3 : (enemyColour == game.getColourOfStone(6, 4) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 4) ? 1 : 0) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : (playerColour == game.getColourOfStone(5, 4) ? 1 : 0)))) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : (-4 >= 0 ? ((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  :  playerCanWinInTwoRounds( playerColour, enemyColour, game) ) : (playerColour == game.getColourOfStone(5, 4) ? 1 : 0))))) >= 0 ? 2 : -4) : (playerColour == game.getColourOfStone(5, 4) ? 1 : 0))))) : -4) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : -4)));
    }
}
